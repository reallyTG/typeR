source("../code/data_processing.R") # get the functions we need
los <- list.files("../data/full_sigs", full.names=TRUE)
names <- list.files("../data/full_sigs")
names(los) <- substr(names, 1, nchar(names)-4)
los <- lapply(los, readRDS)
los <- remove_empties(los)
# annoying strange error that I should fix pops up
los[1:10]
lapply(los[1:10], function(lof) lapply(lof, class_to_primitive_df))
los[[6]]
los[[6]]$variableImpPlot$class
los[[6]]$variableImpPlot$class[[1]]
los[[6]]$variableImpPlot$class[[2]]
los[[6]]$variableImpPlot$class[2]
los[[6]]$variableImpPlot$class[2][[1]]
unlist(los[[6]]$variableImpPlot$class)
los[[6]]$variableImpPlot$class
lapply(los[[6]]$variableImpPlot$class, unlist)
source("../code/data_processing.R") # get the functions we need
lapply(los[1:10], function(lof) lapply(lof, class_to_primitive_df))
los_primitive_class <- lapply(los, function(lof) {lapply(lof, class_to_primitive_df)})
total_mono_clas_prim <- apply_count_to_lopkg_c(los_primitive_class, args_count_all_mono_class)
# argument counts
total_arguments <- apply_count_to_lopkg_c(los, args_count_all)
481/521
# function counts
total_functions <- apply_count_to_lopkg_c(los, length)
total_mono_clas_prim <- apply_count_to_lopkg_c(los_primitive_class, args_count_all_mono_class)
total_mono_clas_functions_prim <- apply_count_to_lopkg_c(los_primitive_class, fun_count_all_mono_class)
poly_class_args_prim <- reduce_extracted_lopkgs_to_one(apply_extract_to_lopkg(los_primitive_class, extract_poly_class_args))
poly_class_args_prim <- poly_class_args_prim[order(-poly_class_args_prim$count),] # sort by count
poly_class_args_prim$perc <- round(poly_class_args_prim$count/sum(poly_class_args_prim$count) * 100, 2)
format_df_for_print(poly_class_args_prim[1:20,])
source("../code/data_processing.R") # get the functions we need
los_primitive_class <- lapply(los, function(lof) {lapply(lof, class_to_primitive_df)})
format_df_for_print(poly_class_args_prim[1:20,])
poly_class_args_prim <- reduce_extracted_lopkgs_to_one(apply_extract_to_lopkg(los_primitive_class, extract_poly_class_args))
poly_class_args_prim <- poly_class_args_prim[order(-poly_class_args_prim$count),] # sort by count
poly_class_args_prim$perc <- round(poly_class_args_prim$count/sum(poly_class_args_prim$count) * 100, 2)
format_df_for_print(poly_class_args_prim[1:20,])
los_basic <- lapply(los, function(lof) {lapply(lof, function(df) {change_type_systems_df(df, type_map_T0_to_r)})})
los_basic_no_null <- lapply(los_basic, function(lof) {lapply(lof, function(df) {fold_NULL_into_other_types_df(df)})})
los_basic_no_null_real <- lapply(los_basic_no_null, function(lof) {lapply(lof, function(df) {fold_together_int_double_df(df)})})
los_basic_no_null_real_primitive_class <- lapply(los_basic_no_null_real, function(lof) {lapply(lof, class_to_primitive_df)})
all_tallies_all_reduced <- lapply(los_basic_no_null_real_primitive_class, tally_up_lofun_c)
all_tallies_all_reduced <- lapply(los_basic_no_null_real_primitive_class, tally_up_lofun_c)
Reduce("||", lapply(los_basic_no_null_real_primitive_class, function(x) length(x) == 0))
los_basic_no_null_real_primitive_class[11]
los_basic_no_null_real_primitive_class[[1]]
los_basic_no_null_real_primitive_class[[2]]
los_basic_no_null_real_primitive_class[[3]]
source("../code/data_processing.R") # get the functions we need
all_tallies_all_reduced <- lapply(los_basic_no_null_real_primitive_class, tally_up_lofun_c)
source("../code/data_processing.R") # get the functions we need
all_tallies_all_reduced <- lapply(los_basic_no_null_real_primitive_class, tally_up_lofun_c)
source("../code/data_processing.R") # get the functions we need
all_tallies_all_reduced <- lapply(los_basic_no_null_real_primitive_class, tally_up_lofun_c)
all_tallies_all_reduced[[1]]
all_tallies_all_reduced$abc
all_tallies_all_reduced$abc$tot_size_of_poly
head(lapply(all_tallies_all_reduced, function(x) x$tot_size_of_poly))
all_tallies_sizes <- lapply(all_tallies_all_reduced, function(x) x$tot_size_of_poly)
head(sort(all_tallies_all_reduced, descending=TRUE))
head(sort(all_tallies_all_reduced))
head(order(all_tallies_all_reduced))
head(sort(all_tallies_sizes))
head(order(all_tallies_sizes))
head(all_tallies_sizes)
head(unlist(all_tallies_sizes))
head(sort(unlist(all_tallies_sizes)))
head(sort(unlist(all_tallies_sizes), descending=TRUE))
head(sort(unlist(all_tallies_sizes), decreasing=TRUE))
head(sort(unlist(all_tallies_sizes), decreasing=TRUE), 20)
head(sort(unlist(all_tallies_sizes), decreasing=TRUE), 20)
los_basic_no_null_real_primitive_class[[1]]
char_real_sigs <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_X_types, types_to_find=c("real", "character"))
source("../code/data_processing.R") # get the functions we need
char_real_sigs <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_X_types, types_to_find=c("real", "character"))
char_real_sigs[[1]]
char_real_sigs[[2]]
char_real_sigs[[3]]
char_real_sigs[[4]]
char_real_sigs[[5]]
char_real_sigs[[6]]
source("../code/data_processing.R") # get the functions we need
char_real_sigs <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_X_types, types_to_find=c("real", "character"))
char_real_sigs[[1]]
char_real_sigs[[2]]
char_real_sigs[[3]]
char_real_sigs[[4]]
char_real_sigs[[5]]
does_df_have_X_types()
does_df_have_X_types
char_real_sigs <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_X_types, types_to_find=c("real", "character"), strict=TRUE)
char_real_sigs[[5]]
source("../code/data_processing.R") # get the functions we need
coincide_list_index <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_coinciding_types_index_and_list_reduced_TS)
coincide_list_index[[1]]
does_df_have_coinciding_types_index_and_list_reduced_TS
does_df_have_coinciding_types_index_and_list_reduced_TS(coincide_list_index[[1]])
check_index <- list("real", "character")
coincide_list_index[[1]] -> df
lapply(df$type, function(lot) {
length(lot) == 2 && Reduce("&&", check_index %in% lot)
})
source("../code/data_processing.R") # get the functions we need
source("../code/data_processing.R") # get the functions we need
coincide_list_index <- get_fun_sigs_matching_pred_from_lopkg(los_basic_no_null_real_primitive_class, does_df_have_coinciding_types_index_and_list_reduced_TS)
source("../code/data_processing.R") # get the functions we need
source("../code/data_processing.R") # get the functions we need
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
los[[1]]
source("../code/data_processing.R") # get the functions we need
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
source("../code/data_processing.R") # get the functions we need
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
source("../code/data_processing.R") # get the functions we need
coincide_list_vector_index <- get_fun_sigs_matching_pred_from_lopkg(los, does_df_have_coinciding_types_index_and_list_or_vector)
1742/2396
char_real_sigs[[40]]
source("../code/data_processing.R")
psp_L0 <- read_csv("../data/L0_subtype.csv.gz")
psp_L0
psp_L0$ret_t %>% head
psp_L0$ret_c %>% head
psp_L0$ret_a %>% head
psp_L0_col <- read_csv("../data/L0_collapsed.csv.gz")
psp_L0_col <- read_csv("../data/L0_collapsed.csv.gz")
psp_L0_col
psp_L0_col[2,2]
psp_L0_col[2,3]
psp_L0_col[3,2]
psp_L0_col[4,2]
L0_arg_sig_c <- read_csv("../data/L0_arg_sig_counts.csv.gz")
L0_arg_sig_c
L0_sanitized <- read_csv("../data/L0_sanitized_class.csv.gz")
L0_sanitized
L0_sanitized[, 40:60]
psp_L2 <- read_csv("../data/L1_L2.csv.gz")
psp_L2
list_of_L2_sig_c <- read_csv("../data/L1_arg_sig_counts_L2.csv.gz")
list_of_L2_sig_c
max(list_of_L2_sig_c$count)
sum(list_of_L2_sig_c$count)
# technically in L2
# base_df <- readRDS("../data/some_plus_examples.RDS")
# base_df <- readRDS("../data/base_with_plus_and_brack.RDS")
base_df <- readRDS("../data/base_with_brack_fixed.RDS")
# for L0
base_df_L0 <- transform_new_df_w_TS_map(base_df, type_map_T0_to_r, unparam = T)
base_df_L0 <- unlist_new_df(base_df_L0)
source("../code/data_processing.R")
# technically in L2
# base_df <- readRDS("../data/some_plus_examples.RDS")
# base_df <- readRDS("../data/base_with_plus_and_brack.RDS")
base_df <- readRDS("../data/base_with_brack_fixed.RDS")
# for L0
base_df_L0 <- transform_new_df_w_TS_map(base_df, type_map_T0_to_r, unparam = T)
base_df_L0 <- unlist_new_df(base_df_L0)
# just types
base_df_just_types <- base_df %>% select(arg1_t, arg2_t, ret_t)
# save L0
write_csv(base_df_L0, "../data/plus_80_L0.csv")
# save L1
write_csv(base_df, "../data/plus_80_L1.csv")
# read subtype
subtype_df_L0 <- read_csv("../data/plus_80_L0_subtype.csv.gz")
subtype_df_L0 <- subtype_df_L0[!subtype_df_L0$pkg == "SUBTYPE",]
subtype_df_L1 <- read_csv("../data/plus_80_L1_subtype.csv.gz")
subtype_df_L1 <- subtype_df_L1[!subtype_df_L1$pkg == "SUBTYPE",]
subtype_df_L2 <- read_csv("../data/plus_80_L1_L2.csv.gz")
subtype_df_L2 <- subtype_df_L2[!subtype_df_L2$pkg == "SUBTYPE",]
subtype_df_L0
# just get +
subtype_df_L0_p <- filter(subtype_df_L0, fun == "+") %>% salient_only_one_fun
subtype_df_L1_p <- filter(subtype_df_L1, fun == "+") %>% salient_only_one_fun
subtype_df_L2_p <- filter(subtype_df_L2, fun == "+") %>% salient_only_one_fun(just_types=F)
# just get [
subtype_df_L0_b <- filter(subtype_df_L0, fun == "[") %>% salient_only_one_fun(just_types = F)
subtype_df_L1_b <- filter(subtype_df_L1, fun == "[") %>% salient_only_one_fun(just_types = F)
subtype_df_L2_b <- filter(subtype_df_L2, fun == "[") %>% salient_only_one_fun(just_types=F)
subtype_df_L2_b
subtype_df_L2_b[10:20,]
subtype_df_L2_b[20:30,]
View(subtype_df_L0_b)
subtype_df_L0_b
subtype_df_L0_b[1:40]
subtype_df_L0_b[1:40,]
subtype_df_L0_b[10:20,]
subtype_df_L0_b[20:30,]
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
library(ggplot2)
library(ggplot2)
setwd("~/Documents/Projects/typeR/data")
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
setwd("~/Documents/Projects/typeR/data")
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
library(dplyr)
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
?read_csv
??read.csv
library(tidyverse)
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
setwd("~/Documents/Projects/typeR/data")
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
setwd("~/Documents/Projects/typeR/data")
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
setwd("~/Documents/Projects/typeR/data/")
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
setwd("~/Documents/Projects/typeR/data/")
library(tidyverse)
init_data_frame <- read_csv("../data/L0_subtype.csv.gz")
init_data_frame <- read_csv("../typeR/data/L0_subtype.csv.gz")
init_data_frame %>%
mutate(num_args =
apply(init_data_frame, 1, function(row) { row[4:23] %>% (function(x) { !is.na(x) }) %>% sum})
) %>%
distinct(fun, .keep_all = T) %>%
select(num_args) -> plot_me
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
View(plot_me)
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
head(init_data_frame)
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
+ xlab("Number of Arguments") + ylab("Number of Functions") + ggtitle("Num Arguments per Function")
ggplot(data = plot_me, aes(x = num_args)) + stat_count()
+ xlab("Number of Arguments") + ylab("Number of Functions") + ggtitle("Num Arguments per Function")
ggplot(data = plot_me, aes(x = num_args)) + stat_count() +
labs(title="Num Arguments per Function", x="Number of Arguments", y="Number of Functions")
ggplot(data = plot_me, aes(x = num_args)) + stat_count() +
labs(title="Num Arguments per Function", x="Number of Arguments", y="Number of Functions") +
theme(axis.text.x = c("0", "5", "10", "15", ">=20"))
ggplot(data = plot_me, aes(x = num_args)) + stat_count() +
labs(title="Num Arguments per Function", x="Number of Arguments", y="Number of Functions") +
theme(axis.text.x = element.text(c("0", "5", "10", "15", ">=20")))
ggplot(data = plot_me, aes(x = num_args)) + stat_count() +
labs(title="Num Arguments per Function", x="Number of Arguments", y="Number of Functions") +
theme(axis.text.x = element_text(c("0", "5", "10", "15", ">=20")))
ggplot(data = plot_me, aes(x = num_args)) + stat_count() +
labs(title="Num Arguments per Function", x="Number of Arguments", y="Number of Functions")
View(init_data_frame)
head(init_data_frame[1:10,])
head(init_data_frame[,1:10])
head(init_data_frame)
library(stats)
some_data_frame <- data.frame(name=c("abc", "def"), grade=c(74, 35), exam_score=c(30, 90))
apply(some_data_frame, 1, function(row) {
row$grade
})
some_data_frame
apply(some_data_frame, 1, function(row) {
row["grade"]
})
summary(some_data_frame)
old_plus <- `+`
1 + 3
`+` <- `-`
1 + 3
x <- 5
attr(x, "free_pass")
attr(x, "free_pass") == T
x <- 5
x
class(x) <- "character"
x
class(x) <- "numeric"
x <- 5
x
class(x)  <- "character"
x
source("../code/data_processing.R")
# unlock binding so we can write to it
# unlockBinding(as.symbol("+"), baseenv())
# This makes + into a closure, so we can deal with it
# assign("+", function(e1, e2) .Primitive("+")(e1, e2), envir=baseenv())
# Actually decorate the base env functions
# genthat::decorate_function(`+`, env=baseenv())
# technically in L2
# base_df <- readRDS("../data/some_plus_examples.RDS")
# base_df <- readRDS("../data/base_with_plus_and_brack.RDS")
base_df <- readRDS("../data/base_with_brack_fixed.RDS")
# for L0
base_df_L0 <- transform_new_df_w_TS_map(base_df, type_map_T0_to_r, unparam = T)
base_df_L0 <- unlist_new_df(base_df_L0)
# just types
base_df_just_types <- base_df %>% select(arg1_t, arg2_t, ret_t)
# pass things over to java
# dont forget to tar
# save L0
write_csv(base_df_L0, "../data/plus_80_L0.csv")
# save L1
write_csv(base_df, "../data/plus_80_L1.csv")
# do the java
# read subtype
subtype_df_L0 <- read_csv("../data/plus_80_L0_subtype.csv.gz")
subtype_df_L0 <- subtype_df_L0[!subtype_df_L0$pkg == "SUBTYPE",]
subtype_df_L1 <- read_csv("../data/plus_80_L1_subtype.csv.gz")
subtype_df_L1 <- subtype_df_L1[!subtype_df_L1$pkg == "SUBTYPE",]
subtype_df_L2 <- read_csv("../data/plus_80_L1_L2.csv.gz")
subtype_df_L2 <- subtype_df_L2[!subtype_df_L2$pkg == "SUBTYPE",]
# just get +
subtype_df_L0_p <- filter(subtype_df_L0, fun == "+") %>% salient_only_one_fun
subtype_df_L1_p <- filter(subtype_df_L1, fun == "+") %>% salient_only_one_fun
subtype_df_L2_p <- filter(subtype_df_L2, fun == "+") %>% salient_only_one_fun(just_types=F)
# just get [
subtype_df_L0_b <- filter(subtype_df_L0, fun == "[") %>% salient_only_one_fun(just_types = F)
subtype_df_L1_b <- filter(subtype_df_L1, fun == "[") %>% salient_only_one_fun(just_types = F)
subtype_df_L2_b <- filter(subtype_df_L2, fun == "[") %>% salient_only_one_fun(just_types=F)
subtype_df_L0_p
subtype_df_L1_p
subtype_df_L1_p[11:20]
subtype_df_L1_p[11:20,]
subtype_df_L0_p %>% unique
subtype_df_L1_p %>% unique
subtype_df_L2_p %>% unique
subtype_df_L2_p %>% unique %>% select(arg1_t == arg2_t == ret_t)
subtype_df_L2_p %>% unique %>% filter(arg1_t == arg2_t == ret_t)
subtype_df_L2_p %>% unique %>% filter(arg1_t == arg2_t)
subtype_df_L2_p %>% unique %>% filter(arg1_t == arg2_t, arg2_t == ret_t)
subtype_df_L2_p %>% unique %>% filter(arg1_t == arg2_t, arg2_t == ret_t, arg1_c == arg2_c, arg2_c == ret_c, arg1_a == arg2_a, arg2_a == ret_a)
