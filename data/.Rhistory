psp
psp %>% filter(pkg=="magrittr")
pf_L1 <- psp %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
pf_L1 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L1
plot_L1 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L1_df
L1_perc_poly <- round(100 * nrow(plot_L1_df[plot_L1_df$num_sigs > 1, ] )/nrow(plot_L1_df), 1)
plot_L1_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L1)",
x = "",
y = "Number of L1 Signatures") + theme(axis.text.x = element_blank())
ggsave("../paper/plots/L1_by_fun.pdf",width=10,height=4)
plot_L1_df %>% tail
plot_L1_df %>% tail
L1_arg_sig_c <- read_csv("../data/L1_arg_sig_counts.csv.gz")
L1_arg_sig_c[order(-L1_arg_sig_c$count),] -> L1_arg_sig_c
L1_arg_sig_c <- L1_arg_sig_c[2:nrow(L1_arg_sig_c), ]
L1_arg_sig_c$perc_tot <- round(L1_arg_sig_c$count / sum(L1_arg_sig_c$count) * 100, 2)
L1_arg_sig_c <- new_df_count_collape_arg_sigs(L1_arg_sig_c, "L1")
L1_poly_sig <- L1_arg_sig_c[L1_arg_sig_c$arg_sig %>% strsplit(split=",") %>% lapply(function(x) length(x) != 1) %>% unlist, ]
L1_arg_sig_c[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
L1_poly_sig[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
pf_L1 <- psp %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
pf_L1 %>% unique %>% nrow -> tot_L1_funs
pf_L1[duplicated(pf_L1),] %>% unique -> poly_L1_funs
poly_L1_funs_c <- poly_L1_funs %>% nrow
setdiff(pf_L1 %>% unique, poly_L1_funs) %>% nrow -> mono_L1_funs_c
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=paste0(c(mono_L1_funs_c/1000, tot_L1_funs/1000) %>% as.integer, "K"), Percentage=c(paste0(round(mono_L1_funs_c/tot_L1_funs * 100, 1), "%"), "---")) %>% xtable %>% print(include.rownames=F)
# L1
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(L1_arg_sig_c$count %>% sum - L1_poly_sig$count %>% sum, L1_arg_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L1_poly_sig$count %>% sum / L1_arg_sig_c$count %>% sum)), 1), "%"), "---")) %>% xtable %>% print(include.rownames=F)
prim_scal <- c("sD", "sL", "sC", "sX", "sI", "sR")
prim_scal <- c("sD", "sL", "sC", "sX", "sI", "sR")
# compute scalars
L1_sc_c <- L1_arg_sig_c[unlist(lapply(L1_arg_sig_c$arg_sig, function(s) nchar(s) == 2 && substr(s, 1, 1) == "s")), ]
L1_sc_c <- L1_sc_c[L1_sc_c$arg_sig %in% prim_scal,]
num_scal <- sum(L1_sc_c$count)
percent_scalar_mono <- round( 100 * num_scal / sum(L1_arg_sig_c$count), 1)
# L2 Time
psp_L2 <- read_csv("../data/L1_L2.csv.gz")
psp_L2 <- psp_L2[!psp_L2$pkg == "SUBTYPE",]
psp_L2
# Plot it
pf_L2 <- psp_L2 %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
pf_L2 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L2
plot_L2 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L2_df
L2_perc_poly <- round(100 * nrow(plot_L2_df[plot_L2_df$num_sigs > 1, ] )/nrow(plot_L2_df), 1)
plot_L2_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L2)",
x = "",
y = "Number of L2 Signatures") + theme(axis.text.x = element_blank())
plot_L2_df %>% tail
pf_L2
psp_L2
# read in new one
psp_L0 <- read_csv("../data/L0_subtype.csv.gz")
# remove SUBTYPE rows
psp_L0 <- psp_L0[!psp_L0$pkg == "SUBTYPE",]
psp_L0
# read it back
psp <- read_csv("../data/L1_subtype.csv.gz")
# remove SUBTYPE rows
psp <- psp[!psp$pkg == "SUBTYPE",]
psp
psp_L0_col <- read_csv("../data/L0_collapsed.csv.gz")
psp_col <- read_csv("../data/L1_collapsed.csv.gz")
# arg counts
# again, Java
L0_arg_sig_c <- read_csv("../data/L0_arg_sig_counts.csv.gz")
L1_arg_sig_c <- read_csv("../data/L1_arg_sig_counts.csv.gz")
# sort
L0_arg_sig_c[order(-L0_arg_sig_c$count),] -> L0_arg_sig_c
L1_arg_sig_c[order(-L1_arg_sig_c$count),] -> L1_arg_sig_c
# rm []
# L0_arg_sig_c[1,"count"] <- 0
# L1_arg_sig_c[1,"count"] <- 0
L0_arg_sig_c <- L0_arg_sig_c[2:nrow(L0_arg_sig_c), ]
L1_arg_sig_c <- L1_arg_sig_c[2:nrow(L1_arg_sig_c), ]
# percentages
L0_arg_sig_c$perc_tot <- round(L0_arg_sig_c$count / sum(L0_arg_sig_c$count) * 100, 2)
L1_arg_sig_c$perc_tot <- round(L1_arg_sig_c$count / sum(L1_arg_sig_c$count) * 100, 2)
# collapse the obvious signatures
L0_arg_sig_c <- new_df_count_collape_arg_sigs(L0_arg_sig_c, "L0")
L1_arg_sig_c <- new_df_count_collape_arg_sigs(L1_arg_sig_c, "L1")
# poly arg counts only
L0_poly_sig <- L0_arg_sig_c[L0_arg_sig_c$arg_sig %>% strsplit(split=",") %>% lapply(function(x) length(x) != 1) %>% unlist, ]
L1_poly_sig <- L1_arg_sig_c[L1_arg_sig_c$arg_sig %>% strsplit(split=",") %>% lapply(function(x) length(x) != 1) %>% unlist, ]
# display all args
L0_arg_sig_c[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
L1_arg_sig_c[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# display poly
L0_poly_sig[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# all pckg (w/ dups)
pf_L0 <- psp_L0 %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
pf_L1 <- psp %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
# Actually, want per fun plots
pf_L0 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L0
# Actually, want per fun plots
pf_L0 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L0
pf_L1 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L1
pf_L1 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L1
plot_L0 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L0_df
plot_L0 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L0_df
plot_L1 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L1_df
# if L0 has no data entry, get rid of it
if (plot_L0_df[plot_L0_df$pkgfun == "no_data::no_data",] %>% nrow == 1)
# if L0 has no data entry, get rid of it
if (plot_L0_df[plot_L0_df$pkgfun == "no_data::no_data",] %>% nrow == 1)
plot_L0_df <- plot_L0_df[!plot_L0_df$pkgfun == "no_data::no_data",]
L1_perc_poly <- round(100 * nrow(plot_L1_df[plot_L1_df$num_sigs > 1, ] )/nrow(plot_L1_df), 1)
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L0)",
x = "",
y = "Number of L0 Signatures") + theme(axis.text.x = element_blank())
ggsave("../paper/plots/L0_by_fun.pdf",width=10,height=4)
# if want top 10
plot_L0_df %>% tail
plot_L1_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L1)",
x = "",
y = "Number of L1 Signatures") + theme(axis.text.x = element_blank())
ggsave("../paper/plots/L1_by_fun.pdf",width=10,height=4)
plot_L1_df %>% tail
# L0
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(L0_arg_sig_c$count %>% sum - L0_poly_sig$count %>% sum, L0_arg_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L0_poly_sig$count %>% sum / L0_arg_sig_c$count %>% sum)), 1), "%"), "---")) %>% xtable %>% print(include.rownames=F)
# L1
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(L1_arg_sig_c$count %>% sum - L1_poly_sig$count %>% sum, L1_arg_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L1_poly_sig$count %>% sum / L1_arg_sig_c$count %>% sum)), 1), "%"), "---")) %>% xtable %>% print(include.rownames=F)
prim_scal <- c("sD", "sL", "sC", "sX", "sI", "sR")
# compute scalars
L1_sc_c <- L1_arg_sig_c[unlist(lapply(L1_arg_sig_c$arg_sig, function(s) nchar(s) == 2 && substr(s, 1, 1) == "s")), ]
L1_sc_c <- L1_sc_c[L1_sc_c$arg_sig %in% prim_scal,]
num_scal <- sum(L1_sc_c$count)
percent_scalar_mono <- round( 100 * num_scal / sum(L1_arg_sig_c$count), 1)
# L2 Time
psp_L2 <- read_csv("../data/L1_L2.csv.gz")
psp_L2 <- psp_L2[!psp_L2$pkg == "SUBTYPE",]
# Plot it
pf_L2 <- psp_L2 %>% mutate(pkgfun = paste(pkg, fun, sep="::")) %>% select(pkgfun)
pf_L2 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L2
pf_L2 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L2
plot_L2 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L2_df
plot_L2 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L2_df
L2_perc_poly <- round(100 * nrow(plot_L2_df[plot_L2_df$num_sigs > 1, ] )/nrow(plot_L2_df), 1)
plot_L2_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L2)",
x = "",
y = "Number of L2 Signatures") + theme(axis.text.x = element_blank())
plot_L2_df %>% tail
plot_L2_df[1,]
plot_L2_df[nrow(plot_L2_df),]
plot_L2_df[1:(nrow(plot_L2_df)-2), ] %>% tail
# gonna remove 2 outliers and talk about them separately
plot_L2_df <- plot_L2_df[1:(nrow(plot_L2_df)-2), ]
plot_L2_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L2)",
x = "",
y = "Number of L2 Signatures") + theme(axis.text.x = element_blank())
ggsave("../paper/plots/L2_by_fun.pdf",width=10,height=4)
psp_L2
# ...
list_of_L2_sig_c <- read_csv("../data/L1_arg_sig_counts_L2.csv.gz")
list_of_L2_sig_c[order(-list_of_L2_sig_c$count),] -> list_of_L2_sig_c
list_of_L2_sig_c[1,"count"] <- 0
list_of_L2_sig_c[order(-list_of_L2_sig_c$count),] -> list_of_L2_sig_c
list_of_L2_sig_c$perc_tot <- round(list_of_L2_sig_c$count / sum(list_of_L2_sig_c$count) * 100, 1)
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
list_of_L2_sig_c
list_of_L2_sig_c %>% tail
list_of_L2_sig_c[nrow(list_of_L2_sig_c),]
# remove last
list_of_L2_sig_c[nrow(list_of_L2_sig_c),]
# remove last
list_of_L2_sig_c <- list_of_L2_sig_c[1:nrow(list_of_L2_sig_c)-1,]
list_of_L2_sig_c
list_of_L2_sig_c %>% tail
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
list_of_L2_sig_c
list_of_L2_sig_c %>% tail
source("../code/data_processing.R")
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
substr("{}", 2, 1)
substr("{}", 2, 1) == ""
source("../code/data_processing.R")
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
source("../code/data_processing.R")
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
list_of_L2_sig_c[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# poly arg counts only
L2_poly_sig <- list_of_L2_sig_c[list_of_L2_sig_c$arg_sig %>% strsplit(split="/") %>% lapply(function(x) length(x) != 3) %>% unlist, ]
L2_poly_sig
# remove error
L2_poly_sig[1, "count"] <- 0
L2_poly_sig[1, "perc_tot"] <- 0
# display poly
L2_poly_sig[2:11,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# Arg Poly Count L2
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(list_of_L2_sig_c$count %>% sum - L2_poly_sig$count %>% sum, list_of_L2_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L2_poly_sig$count %>% sum / list_of_L2_sig_c$count %>% sum)), 2), "%"), "---")) %>% xtable %>% print(include.rownames=F)
# ...
list_of_L2_sig_c <- read_csv("../data/L1_arg_sig_counts_L2.csv.gz")
list_of_L2_sig_c[order(-list_of_L2_sig_c$count),] -> list_of_L2_sig_c
list_of_L2_sig_c[1,"count"] <- 0
list_of_L2_sig_c[order(-list_of_L2_sig_c$count),] -> list_of_L2_sig_c
# remove last
list_of_L2_sig_c <- list_of_L2_sig_c[1:nrow(list_of_L2_sig_c)-1,]
list_of_L2_sig_c$perc_tot <- round(list_of_L2_sig_c$count / sum(list_of_L2_sig_c$count) * 100, 2)
list_of_L2_sig_c <- new_df_count_collape_arg_sigs_L2_actual(list_of_L2_sig_c)
list_of_L2_sig_c[1:10,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# poly arg counts only
L2_poly_sig <- list_of_L2_sig_c[list_of_L2_sig_c$arg_sig %>% strsplit(split="/") %>% lapply(function(x) length(x) != 3) %>% unlist, ]
# remove error
L2_poly_sig[1, "count"] <- 0
L2_poly_sig[1, "perc_tot"] <- 0
# display poly
L2_poly_sig[2:11,] %>% ready_print_count_fun %>% xtable %>% print(include.rownames=F)
# Arg Poly Count L2
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(list_of_L2_sig_c$count %>% sum - L2_poly_sig$count %>% sum, list_of_L2_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L2_poly_sig$count %>% sum / list_of_L2_sig_c$count %>% sum)), 2), "%"), "---")) %>% xtable %>% print(include.rownames=F)
# Arg Poly Count L2
data.frame(`Signature Type`=c("Monomorphic", "Total Seen"), Count=c(list_of_L2_sig_c$count %>% sum - L2_poly_sig$count %>% sum, list_of_L2_sig_c$count %>% sum), Percentage=c(paste0(round(100 * (1 - (L2_poly_sig$count %>% sum / list_of_L2_sig_c$count %>% sum)), 2), "%"), "---")) %>% xtable %>% print(include.rownames=F)
# packages with the most polymorphism
# which TS to use for this?
num_funs_by_pkg <- psp_L0 %>% group_by(pkg, fun) %>% select(pkg, fun) %>% distinct(fun) %>% mutate(count=1) %>% group_by(pkg) %>% summarize(count=sum(count))
num_sigs_by_pkg <- psp_L0 %>% mutate(sig_count = 1) %>% group_by(pkg) %>% summarize(sig_count=sum(sig_count))
poly_count_normalized <- inner_join(num_funs_by_pkg, num_sigs_by_pkg, by="pkg") %>% mutate(poly_norm=sig_count/count)
poly_count_normalized %>% arrange(-poly_norm) %>% slice(2:6) %>% xtable %>% print(include.rownames=F)
# print
poly_count_normalized %>% arrange(-poly_norm) %>% slice(1:10) %>% xtable %>% print(include.rownames=F)
poly_count_normalized
poly_count_normalized %>% arrange(-poly_norm) %>% filter(count>1) %>% slice(1:10) %>% xtable %>% print(include.rownames=F)
psp_L0 %>% filter(pkg="scatterD3")
psp_L0 %>% filter(pkg=="scatterD3")
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_histogram() + labs(title = "Number of Function Signatures per Function (L0)",
x = "",
y = "Number of L0 Signatures") + theme(axis.text.x = element_blank())
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=num_sigs)) +
geom_histogram() + labs(title = "Number of Function Signatures per Function (L0)",
x = "",
y = "Number of L0 Signatures") + theme(axis.text.x = element_blank())
plot_L1_df %>%
ggplot(aes(x=pkgfun_o, y=num_sigs, group=1)) +
geom_line() + labs(title = "Number of Function Signatures per Function (L1)",
x = "",
y = "Number of L1 Signatures")
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=num_sigs)) +
geom_histogram() + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 1) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
plot_L0_df %>% filter(num_sigs > 1)
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 1) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>% mutate(num_sigs = log2(num_sigs)) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 1) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>% mutate(num_sigs = sqrt(num_sigs)) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 1) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>% mutate(num_sigs = sqrt(num_sigs)) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>% mutate(num_sigs = num_sigs^(1/3)) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count")
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_log10()
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_sqrt()
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_sqrt(breaks=c(2, 4, 8, 16, 32, 64))
plot_L0_df %>% tail
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_sqrt(breaks=c(2, 4, 8, 16, 32, 64)) + scale_y_log10(breaks=c(1, 10, 100, 1000, 10000))
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_sqrt(breaks=c(2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(2, 4, 8, 16, 32, 64, 128, 256))
# maybe only plot those with more than 1 sig?
plot_L0_df %>% filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Count") + scale_x_sqrt(breaks=c(2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000))
ggsave("../paper/plots/L0_by_fun.pdf",width=10,height=4)
# maybe only plot those with more than 1 sig?
plot_L0_df %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000))
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000))
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
# Actually, want per fun plots
pf_L0 %>% mutate(num_sigs = 1) %>% group_by(pkgfun) %>% summarize(num_sigs=sum(num_sigs)) -> plot_L0
plot_L0 %>% arrange(num_sigs) %>% mutate(pkgfun_o = factor(pkgfun, pkgfun)) -> plot_L0_df
# if L0 has no data entry, get rid of it
if (plot_L0_df[plot_L0_df$pkgfun == "no_data::no_data",] %>% nrow == 1)
plot_L0_df <- plot_L0_df[!plot_L0_df$pkgfun == "no_data::no_data",]
L0_perc_poly <- round(100 * nrow(plot_L0_df[plot_L0_df$num_sigs > 1, ] )/nrow(plot_L0_df), 1)
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
ggsave("../paper/plots/L0_by_fun.pdf",width=10,height=4)
# maybe only plot those with more than 1 sig?
plot_L0_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.25) + labs(title = "Number of Function Signatures per Function (L0)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L1_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L1)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L1_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L1)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L1_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L1)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
ggsave("../paper/plots/L1_by_fun.pdf",width=10,height=4)
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
ggsave("../paper/plots/L2_by_fun.pdf",width=10,height=4)
plot_L2_df %>% tail
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)) + scale_y_log10(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5) + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
plot_L2_df %>% # filter(num_sigs > 1) %>%
ggplot(aes(x=num_sigs)) +
geom_histogram(binwidth = 0.5, color="black", fill="white") + labs(title = "Number of Function Signatures per Function (L2)",
x = "Number of Unique Signatures",
y = "Number of Functions") + scale_x_sqrt(breaks=c(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)) + scale_y_sqrt(breaks=c(1, 10, 100, 1000, 10000, 100000), labels=c("1", "10", "100", "1K", "10K", "100K"))
psp_L2 %>% head
psp_L2 %>% filter(is.na(arg4_t))
psp_L2 %>% filter(is.na(arg4_t)) %>% slice(38849)
psp_L2 %>% filter(is.na(arg4_t)) %>% slice(38849) %>% select(pkg, fun)
df_rc %>%
mutate(rec=log10(rec),obs=log10(obs))  %>%
ggplot(aes(y=rec, x=obs)) + geom_point(size=0.1) +
labs( x = "Calls Observed", y = "Signatures Recorded") +
scale_x_continuous(breaks = c( 1, 2, 3, 4, 5, 6, 7),
labels = c( 10, 100, 1000, 10000, 100000, 1000000, 10000000))+
scale_y_continuous(breaks = c( 1, 2, 3, 4, 5, 6, 7),
labels = c( 10, 100, 1000, 10000, 100000, 1000000, 10000000))
library(reshape2)
library(ggplot2)
library(ggrepel)
library(tidyverse)
count_df <- read_rds("../data/final_loc_counts.RDS")
# rows might need to be cast to integers
class(count_df$r_counts) <- "integer"
class(count_df$c_counts) <- "integer"
as.tibble(count_df) %>%
mutate(names = rownames(count_df)) -> cloc
# for observations
t_r_s <- read_rds("../data/final_recorded_sigs_by_package.RDS")
tibble(names=names(t_r_s), rec = unlist(t_r_s)) -> total_recorded_sigs
r_b_f <- read_rds("../data/final_obs_counts_df.RDS")
as.tibble(r_b_f) %>%
mutate(names = row.names(r_b_f)) %>%
rename(obs = invo_obs) %>%
select(names, obs) -> records_by_fun
library(reshape2)
library(ggplot2)
library(ggrepel)
library(tidyverse)
count_df <- read_rds("../data/final_loc_counts.RDS")
# rows might need to be cast to integers
class(count_df$r_counts) <- "integer"
class(count_df$c_counts) <- "integer"
as.tibble(count_df) %>%
mutate(names = rownames(count_df)) -> cloc
# for observations
t_r_s <- read_rds("../data/final_recorded_sigs_by_package.RDS")
tibble(names=names(t_r_s), rec = unlist(t_r_s)) -> total_recorded_sigs
r_b_f <- read_rds("../data/final_obs_counts_df.RDS")
as.tibble(r_b_f) %>%
mutate(names = row.names(r_b_f)) %>%
rename(obs = invo_obs) %>%
select(names, obs) -> records_by_fun
library(reshape2)
library(ggplot2)
library(ggrepel)
library(tidyverse)
count_df <- read_rds("../data/final_loc_counts.RDS")
# rows might need to be cast to integers
class(count_df$r_counts) <- "integer"
class(count_df$c_counts) <- "integer"
as.tibble(count_df) %>%
mutate(names = rownames(count_df)) -> cloc
# for observations
t_r_s <- read_rds("../data/final_recorded_sigs_by_package.RDS")
tibble(names=names(t_r_s), rec = unlist(t_r_s)) -> total_recorded_sigs
r_b_f <- read_rds("../data/final_obs_counts_df.RDS")
as.tibble(r_b_f) %>%
mutate(names = row.names(r_b_f)) %>%
# rename(obs = invo_obs) %>%
select(names, obs) -> records_by_fun
library(reshape2)
library(ggplot2)
library(ggrepel)
library(tidyverse)
count_df <- read_rds("../data/final_loc_counts.RDS")
# rows might need to be cast to integers
class(count_df$r_counts) <- "integer"
class(count_df$c_counts) <- "integer"
as.tibble(count_df) %>%
mutate(names = rownames(count_df)) -> cloc
# for observations
t_r_s <- read_rds("../data/final_recorded_sigs_by_package.RDS")
tibble(names=names(t_r_s), rec = unlist(t_r_s)) -> total_recorded_sigs
r_b_f <- read_rds("../data/final_obs_counts_df.RDS")
as.tibble(r_b_f) %>%
mutate(names = row.names(r_b_f)) %>%
rename(obs = invo_obs) %>%
select(names, obs) -> records_by_fun
r_b_f <- read_rds("../data/final_obs_counts_df.RDS")
