package_name, function_name, parameter_position, outer_alternative, inner_alternative, type, count
"neuralnet", "act.deriv.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "act.deriv.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "act.deriv2.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "act.deriv2.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "act.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "act.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "calculate.gradients", -1, 0, 0, "double[]", 1
"neuralnet", "calculate.gradients", 0, 0, 0, "tuple<^double[], ^double[]>", 1
"neuralnet", "calculate.gradients", 1, 0, 0, "integer", 1
"neuralnet", "calculate.gradients", 2, 0, 0, "tuple<^double[], ^double[]>", 1
"neuralnet", "calculate.gradients", 3, 0, 0, "tuple<^double[], ^double[]>", 1
"neuralnet", "calculate.gradients", 4, 0, 0, "^double[]", 1
"neuralnet", "calculate.gradients", 5, 0, 0, "double", 1
"neuralnet", "calculate.gradients", 6, 0, 0, "logical", 1
"neuralnet", "compute.net", -1, 0, 0, "struct<`neurons`:tuple<^double[], ^double[]>, `neuron.deriv`:tuple<^double[], ^double[]>, `net.result`:^double[]>", 1
"neuralnet", "compute.net", 0, 0, 0, "tuple<^double[], ^double[]>", 1
"neuralnet", "compute.net", 1, 0, 0, "integer", 1
"neuralnet", "compute.net", 2, 0, 0, "^double[]", 1
"neuralnet", "compute.net", 3, 0, 0, "any => any", 1
"neuralnet", "compute.net", 4, 0, 0, "any => any", 1
"neuralnet", "compute.net", 5, 0, 0, "any => any", 1
"neuralnet", "compute.net", 6, 0, 0, "any => any", 1
"neuralnet", "compute.net", 7, 0, 0, "logical", 1
"neuralnet", "confidence.interval", -1, 0, 0, "struct<`lower.ci`:tuple<tuple<^double[], ^double[]>>, `upper.ci`:tuple<tuple<^double[], ^double[]>>, `nic`:double>", 1
"neuralnet", "confidence.interval", 0, 0, 0, "struct<`call`:language, `response`:^double[], `covariate`:^double[], `model.list`:struct<`response`:character, `variables`:character[]>, `err.fct`:any => any, `act.fct`:any => any, `linear.output`:logical, `data`:struct<`education`:integer[], `age`:double[], `parity`:double[], `induced`:double[], `case`:double[], `spontaneous`:double[], `stratum`:integer[], `pooled.stratum`:double[]>, `exclude`:null, `net.result`:tuple<^double[]>, `weights`:tuple<tuple<^double[], ^double[]>>, `generalized.weights`:tuple<^double[]>, `startweights`:tuple<tuple<^double[], ^double[]>>, `result.matrix`:^double[]>", 1
"neuralnet", "confidence.interval", 1, 0, 0, "double", 1
"neuralnet", "convert.activation.function", -1, 0, 0, "struct<`fct`:any => any, `deriv.fct`:any => any>", 1
"neuralnet", "convert.activation.function", 0, 0, 0, "character", 1
"neuralnet", "convert.error.function", -1, 0, 0, "struct<`fct`:any => any, `deriv.fct`:any => any>", 1
"neuralnet", "convert.error.function", 0, 0, 0, "character", 1
"neuralnet", "err.deriv.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "err.deriv.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "err.deriv.fct", 1, 0, 0, "^double[]", 1
"neuralnet", "err.deriv2.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "err.deriv2.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "err.deriv2.fct", 1, 0, 0, "^double[]", 1
"neuralnet", "err.fct", -1, 0, 0, "^double[]", 1
"neuralnet", "err.fct", 0, 0, 0, "^double[]", 1
"neuralnet", "err.fct", 1, 0, 0, "^double[]", 1
"neuralnet", "filter", -1, 0, 0, "logical[]", 1
"neuralnet", "filter", 0, 0, 0, "character[]", 1
"neuralnet", "FUN", -1, 0, 0, "tuple<^double[], ^double[]>", 1
"neuralnet", "FUN", 0, 0, 0, "struct<`generalized.weights`:^double[], `weights`:tuple<^double[], ^double[]>, `startweights`:tuple<^double[], ^double[]>, `net.result`:^double[], `output.vector`:double[]>", 1
"neuralnet", "FUN", 0, 0, 1, "^double[]", 1
